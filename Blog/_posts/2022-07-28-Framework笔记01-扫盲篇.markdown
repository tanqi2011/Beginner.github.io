---
layout: post
title:  "Framework笔记01 - 扫盲篇"
date:   2022-07-28 10:10:00 +0800
categories: Framework
---

Aritificial Intelligence

<img src="./../_images/framework/framework.jpeg" alt="思维导图" width="60%">

### 1. 库是什么 

**概念**：库是共享代码的一种使用方式，库的本质是可执行代码的二进制格式，可以被载入到内存中执行。  
**使用**：在开发过程中，一些核心的技术或者常用的框架，出于安全性、稳定性、可复用性等方面考虑，不想被外部查看或者修改，会把核心代码打包成`库`，只需要暴露给外部`头文件`以供使用.  
**种类**：库分为`静态库`和`动态库`两种。


### 2. 库的分类

> **静态库**  
> 静态库分为 `.a`、`.framework` 两种形式。  
> **.a**：二进制文件，还需要另外的 .h 和 sourceFile 来配合使用。  
> **.framework** <推荐>：二进制文件 + .h + sourceFile 的集合。  
> 静态库类似于一个编译好的`.o`的集合，在build的过程中，只会参与`链接`的操作，链接器会将被使用部分合并到可执行文件中去，用函数的实际地址来代替函数的引用。  
> <img src="./../_images/framework/static_lib.jpeg" alt="静态库链接流程" width="60%">

> **动态库**  
> 动态库分为 `.framework`、`.tbd` 两种形式。  
> 动态库其实也可以分为`动态链接库`和`动态加载库`两种，本质区别是加载时间。  
> **动态链接库**：当目标文件被加载时，动态库也跟着被加载到内存中。`Link Binary With Libraries`中的一些库，随着程序启动而启动。  
> **动态加载库**：当需要的时候再使用`dlopen`等代码或者命令的方式加载，在程序启动之后。  
> **iOS8**：iOS8之前，苹果不允许第三方框架使用动态库方式加载；iOS8之后开始允许开发者有条件地创建和使用动态库框架(这种框架叫做`Cocoa Touch Framework`)。虽然是动态框架，但和系统的动态库framework不同，app中使用的`Cocoa Touch Framework`在打包和提交app时会被放到app的bundle内，运行在app的沙盒里，而不能跨app复用。也就是说，不同的app之间还是不能使用同一份framework，不同的app会分别对framework进行签名、打包、加载。  
> [PS]：不过iOS8上开放了App Extension功能，可以为app创建插件；主app和插件之间是可以共享动态库的。  
> **PLT**：动态链接使用了Procedure Linkage Table（PLT），首先这个PLT列出程序中每个函数的调用，当程序开始运行时，如果动态库被加载到内存中，PLT就会去寻找对应函数的地址并记录下来，如果函数被调用过的话，下次调用就可以通过PLT直接找到对应的函数地址了。


### 3. 库的优劣

#### 静态库  
1. 在链接时会被完整复制到可执行文件中，被多次链接就会有多份冗余的拷贝。  
2. 优点：方便程序移植，因为链接完之后，不再与库函数有关系，没有外部依赖，单独放在任何环境中都可以直接执行；代码装载速度、执行速度比动态库快。  
3. 缺点：生成的可执行文件体积较大，包含相同的公共代码，造成空间浪费；每次库升级都需要重新编译、链接源文件。  

#### 动态库  
1. 目标程序只会存储指向动态库的引用，当目标程序运行时，才会被加载进来。  
2. 优点：内存中只保留一份拷贝，可以由多个目标程序共享，节省内存；开发过程独立、耦合度小，便于独立测试和开发，大规模项目适用。  
3. 缺点：  
* 使用动态库的目标程序不是自完备的，它的运行需要依赖动态库。  
* 如果动态库不存在：1)`载入时动态链接`，系统将终止程序、并给出错误信息；2）`运行时动态链接`，系统不会终止程序，但由于动态库对应的函数不可用，程序在加载函数时加载失败。  
* 把动态链接放到运行时来做，程序的启动速度/运行速度会比静态库慢。  
* 因为其独立性，所以较静态库来说，会有更多的版本兼容、模块兼容的问题。  



[Link](http://www.360doc.com/content/17/0319/14/9200790_638168458.shtml)
[Link1](https://blog.csdn.net/kjl167/article/details/124157077)
[Link2](https://blog.csdn.net/weixin_42859280/article/details/122513155)