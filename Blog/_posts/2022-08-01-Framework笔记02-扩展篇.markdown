---
layout: post
title:  "Framework笔记02 - 扩展篇"
date:   2022-08-01 11:14:00 +0800
categories: Framework
---

---

**C语言的`预编译`、`编译`、`汇编`、`链接`、`运行`**

<u>以下命令行使用的是Linux系统下的GCC编译器</u>

---

#### 1. 预编译（预处理）  

```
# 功能：将源代码文件（.c）进行预编译处理生成预编译文件（.i）
$ gcc -E 源文件 -o 预处理文件名
    > -E 预编译阶段结束后停止，将预编译后的数据输出到标准输出
    > -o 将输出到标准输出上的内容输出到指定文件
```
* 执行预处理指令，比如#include "xxx.h"、#define xxx、#if condition等  
* 删除所有的注释

#### 2. 编译

```
# 功能：将预编译后的文件（.i）编译为汇编代码（.s）
$ gcc -S 预编译文件(或源文件) -o 编译文件名
    > -S 编译阶段结束后停止，将编译后的数据输出到标准输出
    > -o 将输出到标准输出上的内容输出到指定文件
```
* 语法分析  
* 词法分析  
* 语义分析  
* 符号汇总（汇总全局符号，如全局变量、函数名等）  

ps: 不同高级语言有不同的预处理器和编译器，但经过编译之后，都变成汇编语言。

#### 3. 汇编

```
# 功能：将汇编代码（.s）转换成机器指令（二进制指令）的目标文件（.o）
$ gcc -c 编译后的文件(或源文件)
    > -c 进行汇编
```
* 形成符号表  

ps: 汇编后的文件格式为elf，可以用readelf命令进行查看内容

#### 4. 链接

```
# 功能：将多个目标文件（.o）和函数库链接为可执行程序（.out）
$ gcc 多个目标文件(或源文件) -o 链接后可执行程序名
    > -o 将输出到标准输出上的内容输出到指定文件
```
* 合并段表  
* 符号表的合并和重定位

> 这里的概念指的是是`静态链接`，而`动态链接`不在这一步，`动态链接`在程序运行的时候加载。

#### 5. 运行

```
# 功能：操作系统将可执行程序（.out）中的代码和数据加载到内存，跳转到程序的第一条指令处（入口点、Entry Point）开始执行。
```
* 操作系统(如果有，没有操作系统则需要手动载入)将程序载入内存。如果有需要链接载入的动态库，这时跟着程序一块载入内存；  
* 运行main函数；  
* 程序运行：使用`运行时堆栈(stack)`存储函数的`局部变量`和`返回地址`；`静内存(static)`存储`静态变量`、`静态函数`等；  
* 程序终止：正常终止；运行错误终止。  

--- 

> C语言在大多数环境下都用一套约定的文件名后缀：  
> > .h文件 - C语言头文件  
> > .c文件 - C语言源代码文件  
> > .i文件 - 预编译后的C语言文件  
> > .s文件 - 编译后的汇编代码文件  
> > .o文件 - 汇编后的目标文件（机器指令文件、二进制文件）  
> > .out文件 - 多个目标文件(源文件)与函数库链接之后的可执行程序  